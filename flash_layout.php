#!/usr/bin/php
<?
    $FlashSize = "8MB";
    $FlashEraseBlockSize = "4k";
    
    $arFlashLayout = array 
    (
		"loader"	=>	"4k",
		"Bootloader"	=>	"124k",
		
		"Recovery"	=>	"800k",
    		
		"Linux1"	=>	"2500k",
		"FS1"		=>	"1112k",
		
		"Linux2"	=>	"2500k",
		"FS2"		=>	"1112k",

    	
		"Factory"	=>	"32k",
		"Env"		=>	"8k",
    );


    $arSizeSuffixes = array 
    (
    		//       0           1                   2
    		//	   out suff		value			
    		array ("Bytes", 	1,					"B"	),
    		array ("kB",		pow(2,10),			"K"	),
    		array ("MB",		pow(2,20),			"M"	),
    		array ("GB",		pow(2,30),			"G" ),
    		array ("TB",		pow(2,40),			"T"	),
    		array ("PB",		pow(2,50),			"P"	),
    );
    

/**
 * 
 * @param unknown $letter
 */
function get_multiply_from_letter ($letter)
{
	global $arSizeSuffixes;
	foreach ($arSizeSuffixes as $arSizeSuffix)
	{
		if ($arSizeSuffix[2] == $letter)
		{
			return $arSizeSuffix[1];
		}	
	}
	return 1;
}    

/** 
 * Converts human string to size in bytes
*/
function  read_human_value ($inputString)
{
	$n = trim ($inputString);
	$n = str_replace (',', '.', $n); // convert decimal point
	$n = strtoupper ($n);

	// match 0-9 and dot one or more times
	// match spaces zero or more times
	// match K or M or G zero or one time
	// match B zero or one time
	if (! preg_match("/^(?P<value>[0-9\.]+)\ *(?P<size>[KMG]?)(?P<bytes>B?)/", $n, $matches))
	{
		echo "Syntax error in '" . $inputString . " '\n";
		die;
	}
	$value = floatval($matches['value']);
	if ($matches['size'])
	{
		$value = $value * get_multiply_from_letter($matches['size']);
	}
	
	return floor($value);
}

/**
 * 
 * @param unknown $value
 * @return string
 */
function get_human_value ($value)
{
	global $arSizeSuffixes;
	return $value ? round ($value/pow(1024, ($i = floor(log($value, 1024)))), 2) . $arSizeSuffixes[$i][0] : '0 Bytes';
}





/**
 *  
 *  main program 
 */

$offset = 0;
$sum = 0;
$mtd_index = 0;

$FlashSizeBytes = read_human_value($FlashSize);
$FlashEraseBlockSize = read_human_value ($FlashEraseBlockSize);

printf ("\nGenerated by '%s'", $_SERVER['argv'][0]);
printf ("\n\nPartitions layout for '%s' = %d B = %08X B flash:\n\n", $FlashSize, $FlashSizeBytes, $FlashSizeBytes);
foreach ($arFlashLayout as $partname => $partdesc)
{
	$part_size = read_human_value ($partdesc);
	echo "mtd" . $mtd_index . " '" . $partname . "' requested size: '" . $part_size ."' (".$partdesc .")\n";
	
	// check minimum size of partition
	if ($part_size < $FlashEraseBlockSize)
	{
		$part_size = $FlashEraseBlockSize;
		printf ("\tsize too small increasing size to %d\n", $part_size);
	}
	// check multiply of erase block (sector size)
	$rest = $part_size % $FlashEraseBlockSize;
	if ( $rest != 0)
	{
		printf ("\tsize not in erase block boundary, increasing to %d\n", $part_size);
		$part_size+=$rest;
	}
	

	printf ("\toffset: 0x%08X %d\n", $offset, $offset);
	printf ("\tsize:   0x%08X %d\n", $part_size, $part_size);
	echo "\n";
	$sum += $part_size;
	$offset += $part_size;
	$mtd_index++;
}

echo "Total length: " . get_human_value($sum) . " (". $sum .")\n";
if ($sum>$FlashSizeBytes)
{
	echo "Flash size exceed! Maximum size is: ". $FlashSizeBytes . "\n";
}
printf ("Unused space: %d B (%s).\n",$FlashSizeBytes - $sum, get_human_value($FlashSizeBytes - $sum));


?>